---
apiVersion: v1
kind: Secret
metadata:
  name: qbittorrent-helm-values
  namespace: media
stringData:
  values.yaml: |-
    podAnnotations:
      # configmap.reloader.stakater.com/reload: "qbittorrent-vpn"
      replicas-max: "1"
    env:
      TZ: "Europe/Warsaw"
      WAIT_FOR_VPN: "true"
      UMASK: "022"
    podSecurityContext:
      runAsUser: 1031
      runAsGroup: 100
      fsGroup: 100
    service:
      additionalServices:
      - enabled: true
        nameSuffix: bittorrent
        type: ClusterIP
        port:
          port: 24589
          name: bittorrent
          protocol: TCP
          targetPort: 24589
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: external
        nginx.ingress.kubernetes.io/auth-url: "https://auth.k.marx.katowice.pl/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: https://auth.k.marx.katowice.pl/oauth2/start
        forecastle.stakater.com/expose: "true"
        forecastle.stakater.com/icon: "https://avatars.githubusercontent.com/u/2131270?s=400&v=4"
        forecastle.stakater.com/network-restricted: "true"
      hosts:
      - host: qb.k.marx.katowice.pl
        paths:
        - path: /
          pathType: Prefix
      tls:
      - hosts:
        - "qb.k.marx.katowice.pl"

    persistence:
      config:
        enabled: true
        existingClaim: config-qb-pvc
      # This should be enabled so that both the qBittorrent and Wireguard container have access to a shared volume mounted to /shared.
      # It will be used to communicate between the two containers.
      shared:
        enabled: true
        emptyDir: true
        mountPath: /shared
      media:
        enabled: true
        existingClaim: nfs-media-omv-pvc
        mountPath: /data/nas-media
    addons:
      vpn:
        enabled: true
        # This Should be set to `wireguard`. This will set the add-on to use the default settings for Wireguard based connections.
        type: wireguard

        # If the podSecurityContext is set to run as a different user, make sure to run the Wireguard container as UID/GID 568.
        # This is required for it to be able to read certain configuration files.
        securityContext:
          runAsUser: 568
          runAsGroup: 568

        env:
          # Enable a killswitch that kills all trafic when the VPN is not connected
          KILLSWITCH: "true"
          TZ: "Europe/Warsaw"
          IPTABLES_BACKEND: legacy

        additionalVolumeMounts:
        - name: qbittorrent-helm-values
          mountPath: /etc/wireguard/wg0.conf
          subPath: vpnConfigfile
        additionalVolumes:
        - name: qbittorrent-helm-values
          secret:
            secretName: qbittorrent-helm-values

        configFile: |-
          [Interface]
          PrivateKey = ${SEALED_WIREGUARD_PRIVATE_KEY}
          Address = ${SEALED_WIREGUARD_ADDRESS}
          DNS = ${SEALED_WIREGUARD_DNS}
          PostUp = /config/up.sh %i
          PreDown = /config/down.sh %i

          [Peer]
          PublicKey = ${SEALED_WIREGUARD_PUBLIC_KEY}
          AllowedIPs = 0.0.0.0/0
          Endpoint = ${SEALED_WIREGUARD_ENDPOINT}

        # The scripts that get run when the VPN connection opens/closes are defined here.
        # The default scripts will write a string to represent the current connection state to a file.
        # Our qBittorrent image has a feature that can wait for this file to contain the word 'connected' before actually starting the application.
        scripts:
          up: |-
            #!/bin/bash
            echo "connected" > /shared/vpnstatus

          down: |-
            #!/bin/bash
            echo "disconnected" > /shared/vpnstatusaddons:
    resources:
      requests:
        memory: 128Mi
        cpu: "0.001"
      limits:
        memory: 512Mi
